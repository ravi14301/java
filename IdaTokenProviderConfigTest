import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import com.jpmorgan.gbig.gateway.infra.config.IdaTokenProviderConfig;
import com.jpmorgan.gbig.gateway.infra.config.IdaApplicationProperties;
import com.jpmorgan.gbig.gateway.infra.token.IdaTokenProviderFactory;
import com.jpmorgan.gbig.gateway.infra.token.IdaTokenProvider;
import com.jpmorgan.gbig.gateway.infra.token.IdaTokenRetrievalStrategy;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Map;

@ExtendWith(MockitoExtension.class)
class IdaTokenProviderConfigTest {

    @Mock
    private IdaApplicationProperties idaApplicationProperties;

    @Mock
    private IdaTokenRetrievalStrategy kerberosStrategy, x509Strategy;

    @InjectMocks
    private IdaTokenProviderConfig idaTokenProviderConfig;

    @BeforeEach
    void setUp() {
        // Mock properties
        when(idaApplicationProperties.getProviderUrl()).thenReturn("https://mock-provider.com");
        when(idaApplicationProperties.getCredentialMode()).thenReturn("x509");

        // Initialize token retrieval strategies
        idaTokenProviderConfig.RETRIEVAL_STRATEGIES = Map.of(
            IdaTokenProviderConfig.KERBEROS, props -> kerberosStrategy,
            IdaTokenProviderConfig.X509, props -> x509Strategy
        );
    }

    @Test
    void testIdaTokenProviderFactoryCreation() {
        // Act
        IdaTokenProviderFactory factory = idaTokenProviderConfig.idaTokenProviderFactory();

        // Assert
        assertNotNull(factory);
        assertEquals("https://mock-provider.com", factory.getProviderUrl());
    }

    @Test
    void testCreateCommonTokenProvider_UsesCorrectStrategy() {
        // Arrange
        String resourceUri = "https://resource.com";

        // Act
        IdaTokenProvider provider = idaTokenProviderConfig.createCommonTokenProvider(resourceUri, true);

        // Assert
        assertNotNull(provider);
        verify(x509Strategy, times(1)).getTokenRetrievalStrategy();
        verify(kerberosStrategy, never()).getTokenRetrievalStrategy();
    }

    @Test
    void testCreateCommonTokenProvider_ThrowsExceptionForInvalidMode() {
        // Arrange
        when(idaApplicationProperties.getCredentialMode()).thenReturn("invalid_mode");

        // Act & Assert
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () ->
            idaTokenProviderConfig.createCommonTokenProvider("https://resource.com", false)
        );
        assertEquals("Unsupported credentialMode invalid_mode", exception.getMessage());
    }
}
