import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.mock.web.server.MockServerRequest;
import org.springframework.web.reactive.function.server.HandlerFilterFunction;
import org.springframework.web.reactive.function.server.ServerRequest;
import org.springframework.web.reactive.function.server.ServerResponse;

import java.net.HttpCookie;
import java.net.URI;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class BuildRouteTest {

    @InjectMocks
    private MyRouterFunction routerFunction; // Replace with your actual class name

    private ServerRequest requestWithToken;
    private ServerRequest requestWithoutToken;

    @BeforeEach
    void setUp() {
        // Mocking request with CBX_TOKEN
        requestWithToken = MockServerRequest.builder()
                .uri(URI.create("/test"))
                .cookie("CBX_TOKEN", "mockedToken")
                .build();

        // Mocking request without CBX_TOKEN
        requestWithoutToken = MockServerRequest.builder()
                .uri(URI.create("/test"))
                .build();
    }

    @Test
    void testCbxTokenInjectorFilterWithToken() {
        HandlerFilterFunction<ServerResponse, ServerResponse> filterFunction = (request, next) -> {
            String cbxToken = request.cookies()
                    .getOrDefault("CBX_TOKEN", List.of())
                    .stream()
                    .findFirst()
                    .map(HttpCookie::getValue)
                    .orElse("");

            if (!cbxToken.isEmpty()) {
                ServerRequest modifiedRequest = ServerRequest.from(request)
                        .headers(headers -> headers.set("CBX_TOKEN", cbxToken))
                        .build();
                return next.handle(modifiedRequest);
            }
            return next.handle(request);
        };

        ServerRequest nextRequest = mock(ServerRequest.class);
        ServerResponse expectedResponse = mock(ServerResponse.class);

        ServerResponse result = filterFunction.filter(requestWithToken, req -> expectedResponse);

        assertNotNull(result);
        assertEquals(expectedResponse, result);
    }

    @Test
    void testCbxTokenInjectorFilterWithoutToken() {
        HandlerFilterFunction<ServerResponse, ServerResponse> filterFunction = (request, next) -> {
            String cbxToken = request.cookies()
                    .getOrDefault("CBX_TOKEN", List.of())
                    .stream()
                    .findFirst()
                    .map(HttpCookie::getValue)
                    .orElse("");

            if (!cbxToken.isEmpty()) {
                ServerRequest modifiedRequest = ServerRequest.from(request)
                        .headers(headers -> headers.set("CBX_TOKEN", cbxToken))
                        .build();
                return next.handle(modifiedRequest);
            }
            return next.handle(request);
        };

        ServerResponse expectedResponse = mock(ServerResponse.class);

        ServerResponse result = filterFunction.filter(requestWithoutToken, req -> expectedResponse);

        assertNotNull(result);
        assertEquals(expectedResponse, result);
    }
}
