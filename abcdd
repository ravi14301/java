> Abcd:
private ResponseEntity<String> handleCbxToken(HttpServletRequest request) {
        StringBuilder cbxToken = new StringBuilder();
        Set<String> cookieKeys = request.getCookies() != null ? request.getCookies() : Set.of();
        for (String cookiename : cookieKeys) {
            if (cookiename.startsWith(CBX_TOKEN)) {
                cbxToken.append(request.getCookies().get(cookiename).getValue());
            }
        }
        log.info("CBX Token: {}", cbxToken);

        if (cbxToken.length() > 0) {
            String sid = extractSid(cbxToken.toString());
            log.info("Extracted SID: {}", sid);
            return ResponseEntity.ok("CBX Token processed with SID: " + sid);
        } else {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("CBX Token missing");
        }
    }



private ResponseEntity<String> handleTokenInjection(HttpServletRequest request, Filters filters, String resourceUri) {
        String token = BEARER_STRING + getTokenForResource(filters, resourceUri);
        StringBuilder cbxToken = new StringBuilder();
        Set<String> cookieKeys = request.getCookies() != null ? request.getCookies() : Set.of();
        for (String cookiename : cookieKeys) {
            if (cookiename.startsWith(CBX_TOKEN)) {
                cbxToken.append(request.getCookies().get(cookiename).getValue());
            }
        }
        log.info("CBX Token: {}", cbxToken);

        if (cbxToken.length() > 0) {
            String sid = extractSid(cbxToken.toString());
            log.info("Extracted SID: {}", sid);
            return ResponseEntity.ok("Token injected with SID: " + sid + " and resource URI: " + resourceUri);
        } else {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("CBX Token missing");
        }
    }


private ResponseEntity<String> handleDefaultOBO(HttpServletRequest request, Filters filters) {
        StringBuilder cbxToken = new StringBuilder();
        Set<String> cookieKeys = request.getCookies() != null ? request.getCookies() : Set.of();
        for (String cookiename : cookieKeys) {
            if (cookiename.startsWith(CBX_TOKEN)) {
                cbxToken.append(request.getCookies().get(cookiename).getValue());
            }
        }
        log.info("CBX Token: {}", cbxToken);

        if (cbxToken.length() > 0) {
            String sid = extractSid(cbxToken.toString());
            log.info("Extracted SID: {}", sid);
            return ResponseEntity.ok("Default OBO processed with SID: " + sid);
        } else {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("CBX Token missing");
        }
    }

    private String getTokenForResource(Filters filters, String resourceUri) {
        IdaTokenProvider provider = filters.isEnableOBO() ?
                idaTokenProviderFactory.getOBOProviderForResource(resourceUri) :
                idaTokenProviderFactory.getProviderForResource(resourceUri);
        return provider.get().getAccessToken();
    }



private class TokenFilter extends OncePerRequestFilter {
        @Override
        protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
                throws ServletException, IOException {
            String cbxToken = CookieUtils.concatenateCookieValues(request.getCookies());
            String sid = extractSid(cbxToken);

            // Modify request (set headers, add parameters, etc.)
            HttpServletRequest modifiedRequest = new ModifiedRequestWrapper(request, cbxToken, sid);
            filterChain.doFilter(modifiedRequest, response);
        }
    }

    private class ModifiedRequestWrapper extends HttpServletRequestWrapper {
        private final String cbxToken;
        private final String sid;

        public ModifiedRequestWrapper(HttpServletRequest request, String cbxToken, String sid) {
            super(request);
            this.cbxToken = cbxToken;
            this.sid = sid;
        }

> Abcd:
@Override
        public String getHeader(String name) {
            if (CBX_TOKEN.equals(name)) {
                return cbxToken;
            }
            return super.getHeader(name);
        }

        @Override
        public String getParameter(String name) {
            if (SID.equals(name)) {
                return sid;
            }
            return super.getParameter(name);
        }
    }
}


@Bean
    public FilterRegistrationBean<OncePerRequestFilter> tokenFilter() {
        FilterRegistrationBean<OncePerRequestFilter> registrationBean = new FilterRegistrationBean<>();
        registrationBean.setFilter(new TokenFilter());
        registrationBean.addUrlPatterns("/**"); // Apply to all routes
        return registrationBean;
}
